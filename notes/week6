Vectors: better for random element access and bulk operations - map, filter...

Lists are better when performing recursive work where 'head' and 'tail' are needed

vectors are created as:

val values = Vector(1,2,3,4)

instead of x :: xs there is

x +: xs		- first element 'x' followed by elements 'xs'
xs :+ x 	- elements 'xs' followed by 'x' as the last element


								Iterable
						
							/		|		\
							
						Sequence	Set	     Map
						
					  /    |     \
					
			    List    Vector   Range


Arrays and Strings are not subclass of Sequence (since they come from Java) but in Scala have most of Sequence funcionalities - map, filter...


Ranges:

1 until 5 // 1,2,3,4
1 to 5 // 1,2,3,4,5
1 to 10 by 3 // 1,4,7,10
6 to 1 by -2 // 6,4,2

ranges are represented with lower bound, upper bound and step value


For expressions:

for ( s ) yield e

s is a sequence of generators and filters, e an expression whose value is returned by the iteration

- generators: pattern <- collection
- filter: if f
- s must start with a generator
- there can be more than 1 generator in the list, the last vary faster
- curly braces can be used instead of brackets 

for {
	i <- 1 until n
	j <- 1 until i
	if isPrime(i + j)
} yield (i,j)

another example
( for ( (x,y) <- xs zip ys ) yield x * y ).sum


Sets vs sequences:

- sets are unordered
- no duplicate elements
- fundamental operation on set is 'contains'



the 'distinct' function removes duplicate elements in a result set


syntax of for is closely related to the higher-order functions 'map', 'flatMap' and 'filter'

def map[T, U](xs: List[T], f: T => U): List[U] = 
	for (x <- xs) yield f(x)


def flatMap[T, U](xs: List[T], f: T => Iterable[U]): List[U] = 
	for (x <- xs; y <- f(x)) yield y


def filter[T](xs: List[T], p: T => Boolean): List[T] =
	for (x <- xs if p(x)) yield x


BUT the scala compiler translates 'for' expressions in terms of map, flatMap and filter

	for (x <- e1) yield e2

is actually translated to

	e1.map(x => e2)


Generalisation of for: since its replaced with the 3 higher functions, it can be used for custom types as long as they implement these 3 functions. this helps with databases, xml...




Maps:

key / value pairs are written in the form:    key -> value



constructors can take an unspecifed sequence of arguments, with a * at the end of the args. eg:

class Poly (values: Map[Int, Double]) {
	
	def this(bindings: (Int, Double)*) = this(bindings.toMap)

}